#!/usr/bin/env node
'use strict';

var nova = require('../lib')
    , getopt = require('node-getopt')
    , AWS = require('aws-sdk')
    , _ = require('underscore')
    , fs = require('fs')
    , util = require('util')
    , q = require('q')
    , config = require('../lib/configuration')
    , yaml = require('js-yaml');;

function parseArguments(commands) {
    var args = process.argv.slice(2);

    // find index of the first command (if present)
    var commandIndexes = _.reject(_.map(_.keys(nova.commands), function(command) {
        return _.indexOf(args, command);
    }), function(idx) { return idx == -1; });

    var commandIndex = _(commandIndexes).isEmpty() ? -1 : commandIndexes[0];
    var commonArgs = [];
    var commandName;
    var commandArgs = [];

    if (commandIndex == -1) {
        commonArgs = args;
    } else {
        commonArgs = args.slice(0, commandIndex);
        commandName = args[commandIndex];
        commandArgs = args.slice(commandIndex+1);
    }

    var commonOpts = getopt.create([
        ['', 'profile=ARG', 'Set which aws profile to use for credentials'],
        ['', 'params=ARG', 'Yml configuration file passed in to your nova deployment definition'],
        ['v', 'verbose', 'Print more stuff'],
        ['d', 'debug', 'Print insane amounts of logs'],
        ['f', 'output-format=ARG', 'Output format (json or text) - defaults to json'],
        ['h', 'help', 'Display help']
    ]);

    var commandDescriptions = _.map(commands, function(command, name) {
        return util.format('  %s\t%s', name, command.descriptionText);
    }).join('\n');

    commonOpts.setHelp(util.format(
'Usage: nova [common_options] command [command_options]\n\n\
Common options:\n\
[[OPTIONS]]\n\n\
Commands:\n\
%s\n\
', commandDescriptions));

    var opts = commonOpts.parse(commonArgs);

    if (opts.argv.length !== 0) {
        // something is wrong, we shouldn't have left over argument here,
        // treat it as fake command name to report an error later.
        commandName = opts.argv[0];
    }

    var showHelp = function(message) {
        if (message) {
            console.error('Error:', message, '\n');
        }
        console.error(commonOpts.getHelp());
    };

    var outputFormat = opts.options['output-format'] || 'json';
    if (outputFormat !== 'text' && outputFormat !== 'json') {
        showHelp('Invalid output format');
        process.exit(0);
    }

    if (opts.options['debug']) {
        opts.options['verbose'] = true;
    }

    return {
        commonArguments: commonArgs,
        commonOptions: opts.options,
        commandName: commandName,
        command: commands[commandName],
        commandArguments: commandArgs,
        showHelp: showHelp,
    };
}

function showCommandHelp(opts, command, errorMessage) {
    var commandName = command.commandName;
    var commandUsage = command.usageText;
    var commandOptions = command.optionsText;

    if (errorMessage) {
        console.error('Error: ' + errorMessage + '\n');
    }

    console.error(util.format(
'Usage: nova %s %s\n\n\
"%s" options:\n\
%s\n\
', commandName, commandUsage, commandName, commandOptions));
}

function initAws(profile, debug) {
    if (debug) {
        AWS.config.logger = process.stdout;
    }

    return q().then(function() {
        if (profile) {
            var options = {
                profile : profile,
            };
            var credentials = new AWS.SharedIniFileCredentials(options);
            // TODO: Look at this
            var refresh = q.nbind(credentials.refresh, credentials);
            return refresh().then(function() {
                return credentials;
            }).catch(function(err) {
                return null;
            });
        }
    }).then(function(credentials) {
        if (!credentials) {
            credentials = new AWS.EnvironmentCredentials('AWS');
            // TODO: Look at this
            var refresh = q.nbind(credentials.refresh, credentials);
            return refresh().then(function() {
                return credentials;
            }).catch(function(err) {
                return null;
            });
        }
    }).then(function(credentials) {
        if (!credentials) {
            throw new Error('Failed to initialize AWS - make sure you provide --profile or set AWS_ACCESS_KEY_ID env var');
        }

        AWS.config.credentials = credentials;
    });
}

function parseParams(params) {
    return q().then(function() {
        if (!params) {
            return {};
        }

        var cwd = process.cwd();
        var filepath = cwd + '/' + params;

        var doc = yaml.safeLoad(fs.readFileSync(filepath, 'utf8'));

        if (!doc) {
            return {};
        }

        return doc;
    });
}

var opts = parseArguments(nova.commands);

if (opts.commonOptions.help) {
    opts.showHelp();
    process.exit(0);
}

if (!opts.command) {
    if (opts.commandName) {
        opts.showHelp('Unknown command specified');
    } else {
        opts.showHelp('Missing command');
    }
    process.exit(0);
}

initAws(opts.commonOptions.profile, opts.commonOptions.debug).then(function() {
    return parseParams(opts.commonOptions.params);
}).then(function(params) {
    var config = {
        params: params,
        verbose: opts.commonOptions.verbose,
        outputFormat: opts.commonOptions['output-format'],
        profile: opts.commonOptions.profile
    };

    var command = new opts.command(config, opts.commandArguments, function help(errorMessage) {
        showCommandHelp(opts, opts.command, errorMessage);
        process.exit(0);
    });

    command.execute();
}).catch(function(err) {
    if (opts.commonOptions.debug) {
        console.log(err.stack)
    }
    opts.showHelp(err.message);
    opts.showHelp(err.message);
    process.exit(0);
});
