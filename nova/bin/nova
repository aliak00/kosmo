#!/usr/bin/env node
'use strict';

var nova = require('../lib')
    , getopt = require('node-getopt')
    , AWS = require('aws-sdk')
    , _ = require('underscore')
    , util = require('util');

function parseArguments(commands) {
    var args = process.argv.slice(2);

    // find index of the first command (if present)
    var commandIndexes = _.reject(_.map(_.keys(nova.commands), function(command) {
        return _.indexOf(args, command);
    }), function(idx) { return idx == -1; });

    var commandIndex = _(commandIndexes).isEmpty() ? -1 : commandIndexes[0];
    var commonArgs = [];
    var commandName;
    var commandArgs = [];

    if (commandIndex == -1) {
        commonArgs = args;
    } else {
        commonArgs = args.slice(0, commandIndex);
        commandName = args[commandIndex];
        commandArgs = args.slice(commandIndex+1);
    }

    var commonOpts = getopt.create([
        ['p', 'profile=ARG', 'set which aws profile to use for credentials'],
        ['v', 'verbose', 'Print more stuff'],
        ['h', 'help', 'Display help']
    ]);

    var commandDescriptions = _.map(commands, function(command, name) {
        return util.format('  %s\t%s', name, command.descriptionText);
    }).join('\n');

    commonOpts.setHelp(util.format(
'Usage: nova [common_options] command [command_options]\n\n\
Common options:\n\
[[OPTIONS]]\n\n\
Commands:\n\
%s\n\
', commandDescriptions));

    var opts = commonOpts.parse(commonArgs);

    if (opts.argv.length !== 0) {
        // something is wrong, we shouldn't have left over argument here,
        // treat it as fake command name to report an error later.
        commandName = opts.argv[0];
    }

    var showHelp = function(message) {
        if (message) {
            console.error('Error:', message, '\n');
        }
        console.error(commonOpts.getHelp());
    };

    return {
        commonArguments: commonArgs,
        commonOptions: opts.options,
        commandName: commandName,
        command: commands[commandName],
        commandArguments: commandArgs,
        showHelp: showHelp,
    };
}

function showCommandHelp(opts, command, errorMessage) {
    var commandName = command.commandName;
    var commandUsage = command.usageText;
    var commandOptions = command.optionsText;

    if (errorMessage) {
        console.error('Error: ' + errorMessage + '\n');
    }

    console.error(util.format(
'Usage: nova %s %s\n\n\
"%s" options:\n\
%s\n\
', commandName, commandUsage, commandName, commandOptions));
}

function loadConfiguration() {
    var credentials = new AWS.SharedIniFileCredentials({profile: opts.commonOptions.profile});
    AWS.config.credentials = credentials;
    AWS.config.logger = process.stdout;
}

var opts = parseArguments(nova.commands);

if (opts.commonOptions.help) {
    opts.showHelp();
    process.exit(0);
}

if (!opts.command) {
    if (opts.commandName) {
        opts.showHelp('Unknown command specified');
    } else {
        opts.showHelp('Missing command');
    }
    process.exit(0);
}

loadConfiguration();

var command = new opts.command(opts.commonOptions, opts.commandArguments, function help(errorMessage) {
    showCommandHelp(opts, opts.command, errorMessage);
    process.exit(0);
});

command.execute();
