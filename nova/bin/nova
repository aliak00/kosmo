#!/usr/bin/env node
'use strict';

var nova = require('../lib')
    , getopt = require('node-getopt')
    , AWS = require('aws-sdk')
    , _ = require('lodash')
    , fs = require('fs')
    , util = require('util')
    , q = require('q')
    , config = require('../lib/configuration')
    , yaml = require('js-yaml');;

function parseArguments(commands) {
    var args = process.argv.slice(2);

    // find index of the first command (if present)
    var commandIndex = _(nova.commands)
        .keys()
        .map(function(command) {
            return _.indexOf(args, command);
        })
        .find(function(idx) {
            return idx != -1;
        });

    var commonArgs = [];
    var commandName;
    var commandArgs = [];

    if (typeof commandIndex == 'undefined') {
        commonArgs = args;
    } else {
        commonArgs = args.slice(0, commandIndex);
        commandName = args[commandIndex];
        commandArgs = args.slice(commandIndex + 1);
    }

    var commonOpts = getopt.create([
        ['', 'profile=ARG', 'Set which aws profile to use for credentials'],
        ['', 'params=ARG+', 'Yml configuration file passed in to your nova deployment definition'],
        ['v', 'verbose', 'Print more stuff'],
        ['d', 'debug', 'Print insane amounts of logs'],
        ['f', 'output-format=ARG', 'Output format (json or text) - defaults to json'],
        ['', 'version', 'Display current version'],
        ['h', 'help', 'Display help'],
    ]);

    var commandDescriptions = _.map(commands, function(command, name) {
        // Pad right to get consistent tabs
        const maxCommandLengthBeforeTab = 8;
        name = _.padRight((name + ':'), maxCommandLengthBeforeTab);
        return util.format('  %s\t%s', name, command.descriptionText);
    }).join('\n');

    commonOpts.setHelp(util.format(
'Usage: nova [common_options] command [command_options]\n\n\
Common options:\n\
[[OPTIONS]]\n\n\
Commands:\n\
%s\n\
', commandDescriptions));

    var opts = commonOpts.parse(commonArgs);

    if (opts.argv.length !== 0) {
        // something is wrong, we shouldn't have left over argument here,
        // treat it as fake command name to report an error later.
        commandName = opts.argv[0];
    }

    var showHelp = function(message) {
        if (message) {
            console.error('Error:', message, '\n');
        }
        console.error(commonOpts.getHelp());
    };

    var outputFormat = opts.options['output-format'] = opts.options['output-format'] || 'text';
    if (outputFormat !== 'text' && outputFormat !== 'json') {
        showHelp('Invalid output format');
        process.exit(0);
    }

    if (opts.options['debug']) {
        opts.options['verbose'] = true;
    }

    return {
        commonArguments: commonArgs,
        commonOptions: opts.options,
        commandName: commandName,
        command: commands[commandName],
        commandArguments: commandArgs,
        showHelp: showHelp,
    };
}

function showCommandHelp(opts, command, errorMessage) {
    var commandName = command.commandName;
    var commandUsage = command.usageText;
    var commandOptions = command.optionsText;

    if (errorMessage) {
        console.error('Error: ' + errorMessage + '\n');
    }

    console.error(util.format(
'Usage: nova %s %s\n\n\
"%s" options:\n\
%s\n\
', commandName, commandUsage, commandName, commandOptions));
}

function initAws(profile, debug) {
    if (debug) {
        AWS.config.logger = process.stdout;
    }

    return q().then(function() {
        if (profile) {
            var options = {
                profile : profile,
            };
            var credentials = new AWS.SharedIniFileCredentials(options);
            // TODO: Look at this
            var refresh = q.nbind(credentials.refresh, credentials);
            return refresh().then(function() {
                return credentials;
            }).catch(function(err) {
                return null;
            });
        }
    }).then(function(credentials) {
        if (!credentials) {
            credentials = new AWS.EnvironmentCredentials('AWS');
            // TODO: Look at this
            var refresh = q.nbind(credentials.refresh, credentials);
            return refresh().then(function() {
                return credentials;
            }).catch(function(err) {
                return null;
            });
        }
        return credentials;
    }).then(function(credentials) {
        if (!credentials) {
            throw new Error('Failed to initialize AWS - make sure you provide --profile or set AWS_ACCESS_KEY_ID env var');
        }

        AWS.config.credentials = credentials;
    });
}

function mergeDeep(value1, value2, resolver) {
    function _mergeDeep(value1, value2, path1, path2) {
        if (typeof value1 !== typeof value2) {
            return resolver(value1, value2, path1, path2) || value2;
        }

        if (_.isArray(value1) && _.isArray(value2)) {
            return resolver(value1, value2, path1, path2) || value1.concat(value2);
        } else if (_.isArray(value1) || _.isArray(value2)) {
            return resolver(value1, value2, path1, path2) || value2;
        }

        if (_.isObject(value1) && _.isObject(value2)) {
            var keys1 = _.keys(value1);
            var keys2 = _.keys(value2);

            var result = {};

            // add distinct keys
            var distinctKeys = _.difference(keys1, keys2).concat(_.difference(keys2, keys1));
            result = _.extend(result,
              _.pick(value1, distinctKeys),
              _.pick(value2, distinctKeys));

            // recursively merge common keys
            var commonKeys = _.intersection(keys1, keys2);
            var common = _.reduce(commonKeys, function(memo, key) {
                var value = _mergeDeep(value1[key], value2[key], path1+'.'+key, path2+'.'+key);
                memo[key] = value;
                return memo;
            }, {});

            result = _.extend(result, common);
            return result;
        }

        return resolver(value1, value2, path1, path2) || value2;
    }

    if (!_.isObject(value1) || !_.isObject(value2)) {
        resolver(null, null, '<root>', '<root>');
        return value2;
    }

    return _mergeDeep(value1, value2, '', '');
}

function readParams(paramsFiles) {
    return q().then(function() {
        if (!paramsFiles || paramsFiles.length === 0) {
            return [];
        }

        var promises = _.map(paramsFiles, function(paramsFile) {
            var readFile = q.nbind(fs.readFile, fs);
            return readFile(paramsFile, { encoding: 'utf-8', flag: 'r' });
        });

        return q.all(promises);
    }).then(function(datas) {
        return _.reduce(datas, function(memo, data) {
            var object = yaml.safeLoad(data) || {};

            return mergeDeep(memo, object, function(value1, value2, path1, path2) {
                console.log('Warning: cannot cleanly merge params files ("%s" and "%s")...', path1, path2);
            });
        }, {});
    });
}

var opts = parseArguments(nova.commands);
config.commonOptions = opts.commonOptions;

if (opts.commonOptions.help) {
    opts.showHelp();
    process.exit(0);
}

if (opts.commonOptions.version) {
    console.log(nova.version);
    process.exit(0);
}

if (!opts.command) {
    if (opts.commandName) {
        opts.showHelp('Unknown command specified');
    } else {
        opts.showHelp('Missing command');
    }
    process.exit(0);
}

initAws(opts.commonOptions.profile, opts.commonOptions.debug).then(function() {
    return readParams(opts.commonOptions.params);
}).then(function(paramsObject) {
    config.paramsObject = paramsObject;
}).then(function() {
    var command = new opts.command(opts.commandArguments, function help(errorMessage) {
        showCommandHelp(opts, opts.command, errorMessage);
        process.exit(0);
    });

    return command.execute();
}).catch(function(err) {
    if (opts.commonOptions.debug) {
        console.log(err.stack)
    }
    opts.showHelp(err.message);
    process.exit(0);
}).done();
